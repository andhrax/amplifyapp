{"ast":null,"code":"var _jsxFileName = \"/Users/andhrax/coding/amplifyapp/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';\nimport { listNotes } from './graphql/queries';\nimport { createNote as createNoteMutation, deleteNote as deleteNoteMutation } from './graphql/mutations';\nimport { API, Storage } from 'aws-amplify';\nconst initialFormState = {\n  name: '',\n  description: ''\n};\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n  const [formData, setFormData] = useState(initialFormState);\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n\n  async function fetchNotes() {\n    const apiData = await API.graphql({\n      query: listNotes\n    });\n    const notesFromAPI = apiData.data.listNotes.items;\n    await Promise.all(notesFromAPI.map(async note => {\n      if (note.image) {\n        const image = await Storage.get(note.image);\n        note.image = image;\n      }\n\n      return note;\n    }));\n    setNotes(apiData.data.listNotes.items);\n  }\n\n  async function createNote() {\n    if (!formData.name || !formData.description) return;\n    await API.graphql({\n      query: createNoteMutation,\n      variables: {\n        input: formData\n      }\n    });\n\n    if (formData.image) {\n      const image = await Storage.get(formData.image);\n      formData.image = image;\n    }\n\n    setNotes([...notes, formData]);\n    setFormData(initialFormState);\n  }\n\n  async function deleteNote({\n    id\n  }) {\n    const newNotesArray = notes.filter(note => note.id !== id);\n    setNotes(newNotesArray);\n    await API.graphql({\n      query: deleteNoteMutation,\n      variables: {\n        input: {\n          id\n        }\n      }\n    });\n  }\n\n  async function onChange(e) {\n    if (!e.target.files[0]) return;\n    const file = e.target.files[0];\n    setFormData({ ...formData,\n      image: file.name\n    });\n    await Storage.put(file.name, file);\n    fetchNotes();\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, \"My Notes App\"), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: e => setFormData({ ...formData,\n      'name': e.target.value\n    }),\n    placeholder: \"Note name\",\n    value: formData.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: e => setFormData({ ...formData,\n      'description': e.target.value\n    }),\n    placeholder: \"Note description\",\n    value: formData.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: createNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"Create Note\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginBottom: 30\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, notes.map(note => /*#__PURE__*/React.createElement(\"div\", {\n    key: note.id || note.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, note.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, note.description), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => deleteNote(note),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  }, \"Delete note\"), note.image && /*#__PURE__*/React.createElement(\"img\", {\n    src: note.image,\n    style: {\n      width: 400\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 31\n    }\n  })))), /*#__PURE__*/React.createElement(AmplifySignOut, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default withAuthenticator(App);","map":{"version":3,"sources":["/Users/andhrax/coding/amplifyapp/src/App.js"],"names":["React","useState","useEffect","withAuthenticator","AmplifySignOut","listNotes","createNote","createNoteMutation","deleteNote","deleteNoteMutation","API","Storage","initialFormState","name","description","App","notes","setNotes","formData","setFormData","fetchNotes","apiData","graphql","query","notesFromAPI","data","items","Promise","all","map","note","image","get","variables","input","id","newNotesArray","filter","onChange","e","target","files","file","put","value","marginBottom","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';\nimport { listNotes } from './graphql/queries';\nimport { createNote as createNoteMutation, deleteNote as deleteNoteMutation } from './graphql/mutations';\nimport { API, Storage } from 'aws-amplify';\n\nconst initialFormState = { name: '', description: '' }\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n  const [formData, setFormData] = useState(initialFormState);\n\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n\n  async function fetchNotes() {\n    const apiData = await API.graphql({ query: listNotes });\n    const notesFromAPI = apiData.data.listNotes.items;\n    await Promise.all(notesFromAPI.map(async note => {\n      if (note.image) {\n        const image = await Storage.get(note.image);\n        note.image = image;\n      }\n      return note;\n    }))\n    setNotes(apiData.data.listNotes.items);\n  }\n\n  async function createNote() {\n    if (!formData.name || !formData.description) return;\n    await API.graphql({ query: createNoteMutation, variables: { input: formData } });\n    if (formData.image) {\n      const image = await Storage.get(formData.image);\n      formData.image = image;\n    }\n    setNotes([ ...notes, formData ]);\n    setFormData(initialFormState);\n  }\n\n  async function deleteNote({ id }) {\n    const newNotesArray = notes.filter(note => note.id !== id);\n    setNotes(newNotesArray);\n    await API.graphql({ query: deleteNoteMutation, variables: { input: { id } }});\n  }\n  async function onChange(e) {\n    if (!e.target.files[0]) return\n    const file = e.target.files[0];\n    setFormData({ ...formData, image: file.name });\n    await Storage.put(file.name, file);\n    fetchNotes();\n  }\n  return (\n    <div className=\"App\">\n      <h1>My Notes App</h1>\n      <input\n        onChange={e => setFormData({ ...formData, 'name': e.target.value})}\n        placeholder=\"Note name\"\n        value={formData.name}\n      />\n      <input\n        onChange={e => setFormData({ ...formData, 'description': e.target.value})}\n        placeholder=\"Note description\"\n        value={formData.description}\n      />\n      <input\n        type=\"file\"\n        onChange={onChange}\n      />\n      <button onClick={createNote}>Create Note</button>\n      <div style={{marginBottom: 30}}>\n        {\n          notes.map(note => (\n            <div key={note.id || note.name}>\n              <h2>{note.name}</h2>\n              <p>{note.description}</p>\n              <button onClick={() => deleteNote(note)}>Delete note</button>\n              {\n                note.image && <img src={note.image} style={{width: 400}} />\n              }\n            </div>\n          ))\n        }\n      </div>\n      <AmplifySignOut />\n    </div>\n  );\n}\n\nexport default withAuthenticator(App);"]},"metadata":{},"sourceType":"module"}